* Monads
Monads are a natural extension of applicative functors and with them we're concerned with this:
if you have a value with a context, =m a=, how do you apply to it a function that takes a normal =a= and returns a value with a context?
That is, how do you apply a function of type =a -> m b= to a value of type =m a=?
So essentially, we will want this function:

#+begin_src haskell
(>>=) :: (Monad m) => m a -> (a -> m b) -> m b
#+end_src

If we have a fancy values and a function that takes a normal value but returns a fancy value, how do we feed that fancy value into the function?
This is the main question that we will concern ourselves when dealing with monads.
We write =m a= instead of =f a= because the =m= stands for =Monad=, but monads are just applicative functors that support =>>==. The =>>== function is pronounced as /bind/.

Much to no one's surprise, =Maybe= is a monad, so let's explore it a bit more and see if we can combine it with what we know about monads.

A value of type =Maybe a= represents a value of type =a= with the context of possible failure attached.
When we looked at =Maybe= as a functor, we saw that if we want to =fmap= a function over it, it gets mapped over the insides if it's a =Just= value, otherwise the =Nothing= is kept because there's nothing to map it over.
Like this:

#+begin_src haskell
fmap (++"!") (Just "windom")
#+end_src

#+RESULTS:
: Just "windom!"

#+begin_src haskell
fmap (++"!") Nothing
#+end_src

#+RESULTS:
: Nothing

As an applicative functor, it functions simirlaly. However, applicatives also have the function wrapped.
=Maybe= is an applicative functor in such a way that when we use =<*>= to apply a function inside a =Maybe= to a value that's inside a =Maybe=, they both have to be =Just= values for the result to be a =Just= value, otherwise the result is =Nothing=.

#+begin_src haskell
Just (+3) <*> Just 3
#+end_src

#+RESULTS:
: Just 6

#+begin_src haskell
Nothing <*> Just "greed"
#+end_src

#+RESULTS:
: Nothing

When we use the applicative style to have normal functions act on =Maybe= values, it's similar.
All the values have to be =Just= values, otherwise it's all for =Nothing=!

#+begin_src haskell
max <$> Just 3 <*> Just 6
#+end_src

#+RESULTS:
: Just 6

#+begin_src haskell
max <$> Just 3 <*> Nothing
#+end_src

#+RESULTS:
: Nothing

And now, let's think about how we would do =>>== for =Maybe=. Like we said, =>>== takes a monadic value, and a function that takes a normal value and returns a monadic value and manages to apply that function to the monadic value.
How does it do that, if the function takes a normal value? Well, to do that, it has to take into account the context of that monadic value.

In this case, =>>== would take a =Maybe a= value and a function of type =a -> Maybe b= and somehow apply the function to the =Maybe a=.
To figure out how it does that, we can use the intuition that we have from =Maybe= being an applicative functor.
Let's say that we have a function =\x -> Just (x+1)=. It takes a number, adds =1= to it and wraps it in a =Just=.

#+begin_src haskell
(\x -> Just (x+1)) 1
#+end_src

#+RESULTS:
: Just 2

Now here's the kicker: how do we feed a =Maybe= value to this function?
If we think about how =Maybe= acts as an applicative functor, answering this is pretty easy, if we feed it a =Just= value, take what's inside the =Just= and apply the function to it.
If give it a =Nothing=, then we're left with a function but =Nothing= to apply it to.
In this case, let's just do what we did before and say that the result is =Nothing=.

Instead of calling it =>>==, let's call it =applyMaybe= for now.
It takes a =Maybe a= and a function that returns a =Maybe b= and manages to apply that function to the =Maybe a=.
Here it is in code:

#+begin_src haskell
  :{
    applyMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b
    applyMaybe Nothing f = Nothing
    applyMaybe (Just x) f = f x
  :}
#+end_src

#+RESULTS:

Okay, now let's play with it for a bit.
We'll use it as an infix function so that the =Maybe= values is on the left side and the function on the right:

#+begin_src haskell
Just 3 `applyMaybe` \x -> Just (x+1)
#+end_src

#+RESULTS:
: Just 4

#+begin_src haskell
Nothing `applyMaybe` \x -> Just (x+1)
#+end_src

#+RESULTS:
: Nothing

In the above example, we see that when we used =applyMaybe= with a =Just= value and a function simply got applied to the value inside the =Just=. When we tried to use it with a =Nothing=, the whole result was =Nothing=.
What about if the function returns a =Nothing=? Let's see:

#+begin_src haskell
Just 3 `applyMaybe` \x -> if x > 2 then Just x else Nothing
#+end_src

#+RESULTS:
: Just 3

#+begin_src haskell
Just 1 `applyMaybe` \x -> if x > 2 then Just x else Nothing
#+end_src

#+RESULTS:
: Nothing

Just what we expected. If the monadic value on the left is a =Nothing=, the whole thing is =Nothing=.
And if the function on the right returns a =Nothing=, the result is =Nothing= again.
This is very similar to when we used =Maybe= as an applicative and we got a =Nothing= result if somewhere in these was a =Nothing=.
